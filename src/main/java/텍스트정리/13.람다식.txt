[ 람다식 ]
    1. 정의 : 익명 함수를 간결하게 표현하는 방법
        -> JS( => 화살표함수 비슷 )
        -> 메소드 없이 자바8 이상 문법 적용
    2. 목적
        1. 가독성 , 간결하게  표현
        2. 코드 양 축소
        3. 스트림API , javaGUI
        등등
    3. 주요 함수형 인터페이스
        인터페이스                                   사용                  설명
        Function< 매개변수타입 , 리턴값타입 >          .apply(인자값)         인자값을 람다표현식 매개변수로 전달 하고 반환 있음
        Consumer< 매개변수타입 >                     .accept( 인자값 )      인자값을 람다표현식 매개변수로 전달 하고 반환 없음
        Supplier< 리턴값타입 >                       .get()                결과값 반환 있음
        Predicate< 매개변수타입 >                    .test( 인자값 )        인자값을 람다표현식 매개변수로 전달 하고 반환(T/F) 있음

    4. 람다표현식 주로 추상메소드 와 같이 사용된다.  , 주로 컬렉션프레임워크(인터페이스) 같이 사용된다.
        1.
            interface 인터페이스명{
                반환타입 추상메소드( 매개변수타입 x );
            }
        2.
            ( 매개변수타입 ) -> { 구현부 }
        ==================================================
        리스트명.forEach( 람다식 )
        리스트명.forEach( ( ) -> { }  )



[ 스트림API ]
    1. 정의 : 데이터의 연속된 흐름 처리하는 방식 지원
        -> 주로 컬렉션 프레임워크와 같이 사용한다.
    2. 목적
        1. 가독성 ,   간결하게  표현
        2. 코드 양 축소
        등등
    3. 스트림 흐름
        ----------------- stream -------------------------------------------------   최종연산
            value -- filter( 값필터 )--> value --sorted( 정렬 )--> value ---> value    List( value , value )
        --------------------------------------------------------------------------
    4. 주요 연산 처리 방법
        1. 중간연산 : 데이터의 변경 또는 필터를 담당 하는 메소드들
            filter()
            map()
            sorted()
            distinct()
            등등
        2. 최종연산 : 데이터의 결과를 반환 담당하는 메소드들
            forEach()
            collect()
            count()
            reduce()
            등등
[ 메소드 레퍼런스 API ]
    1. 정의 : 이미 정의된 함수/생성자를 호출하는 기능 , 람다식 보다 더 간결하게 표현하는 방법
        -> 주의할점은 : 정의되지 않은 메소드에 대해서는 사용 불가능.
        예]
            numbers.stream()
                    .sorted( Comparator.reverseOrder() )
                    .forEach(x -> System.out.println( x ) );
                VS
            numbers.stream()
                    .sorted( Comparator.reverseOrder() )
                    .forEach( System.out::println );
    2.목적
        1. 가독성 , 간결한 코드 향상
        2. 리팩토링 과 유지보수 용이
    3. 사용법
        (1.static메소드를 호출하는방법 ) 클래스명::static메소드명
        (2.일반메소드를 호출하는방법 ) 객체명::메소드명
        (3.생성자를 호출하는방법) 클래스명::new

    4. 사용처 : 주로 stream(스트림) 에서의 람다 표현식의 이미 정의된 함수를 호출할때 사용


































