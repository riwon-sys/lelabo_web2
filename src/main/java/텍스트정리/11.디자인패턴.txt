[ 디자인 패턴 ]
    1. 정의 : 개발(소프트웨어) 에서 자주 발생하는 문제 들을 해결하기 위한 방법
    2. 종류
        1. 싱글톤 패턴 : 프로그램내 하나의 객체가 존재해야되는 경우
        2. MVC 패턴 : 모델 뷰 컨트롤러로 나누어 관리하는 경우
        3. 팩토리 패턴 : 객체를 직접 생성하지 않고 팩토리에서 객체 생성하고 관리하는 경우
            -> 스프링 컨테이너( 팩토리 - BeanFactory ) 에 빈 등록한다. @Component
            -> JDBC(연동유지)
        4. 빌더 패턴 : 복잡한 객체 생성을 유연하게 생성할 경우
            -> 롬복 @Builder
            -> StringBuilder

[ @Builder ]
    1. 정의 : 롬복 라이브러리 에서 제공하는 빌더 패턴
    2. 목적 : 복잡한 객체 생성을 직관적으로 한다. 가독성 향상 . 매개변수 많을때 편리
    3. 주 메소드
        .builder() : 빌더 객체 생성 함수
        .필드명( 값 ) : 해당 필드에 값 설정
        .build() : 최종적으로 객체 생성
    4. 사용법
        -> new 생성자명( 값 , 값 );
        -> 클래스명.builder().필드명(값).필드명(값).build();
